OpenShadingLanguage 1.00
# Compiled by oslc 1.7.5
# options: -q -O2 -IC:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders -o C:/Users/TGubs/Code/Python/blenderpy/build/temp.win-amd64-3.5/Release/intern/cycles/kernel/shaders/node_bump.oso
surface node_bump
param	int	invert	0		%read{23,23} %write{2147483647,-1}
param	int	use_object_space	0		%read{4,36} %write{2147483647,-1}
param	normal	NormalIn	0 0 0		%read{3,3} %write{0,0} %initexpr
param	float	Strength	0.1		%read{21,21} %write{2147483647,-1}
param	float	Distance	1		%read{22,22} %write{2147483647,-1}
param	float	SampleCenter	0		%read{15,17} %write{2147483647,-1}
param	float	SampleX	0		%read{15,15} %write{2147483647,-1}
param	float	SampleY	0		%read{17,17} %write{2147483647,-1}
oparam	normal	NormalOut	0 0 0		%read{31,51} %write{1,85} %initexpr
global	point	P	%read{2,2} %write{2147483647,-1} %derivs
global	vector	I	%read{40,58} %write{2147483647,-1}
global	normal	N	%read{0,1} %write{2147483647,-1}
global	normal	Ng	%read{44,84} %write{2147483647,-1}
local	vector	___538_R	%read{44,44} %write{43,43}
local	vector	___538_X	%read{53,83} %write{52,52}
local	float	___538_Ix	%read{2147483647,-1} %write{53,53}
local	float	___538_Iz	%read{67,67} %write{54,54}
local	float	___538_Ix2	%read{61,65} %write{57,57}
local	float	___538_Iz2	%read{61,61} %write{60,60}
local	float	___538_Ix2Iz2	%read{64,76} %write{61,61}
local	float	___538_a	%read{69,73} %write{66,66}
local	float	___538_b	%read{69,74} %write{68,68}
local	float	___538_c	%read{75,75} %write{72,74}
local	float	___538_Nz	%read{80,84} %write{78,78}
local	float	___538_Nx	%read{83,83} %write{82,82}
local	point	Ptmp	%read{6,11} %write{2,6} %derivs
local	normal	Normal	%read{8,33} %write{3,9}
local	vector	dPdx	%read{13,14} %write{10,10}
local	vector	dPdy	%read{12,12} %write{11,11}
local	vector	Rx	%read{14,16} %write{12,12}
local	vector	Ry	%read{18,18} %write{13,13}
local	float	det	%read{20,26} %write{14,14}
local	vector	surfgrad	%read{28,28} %write{19,19}
local	float	absdet	%read{25,25} %write{20,20}
local	float	strength	%read{31,32} %write{21,21}
local	float	dist	%read{24,27} %write{22,24}
const	string	$const1	"object"		%read{6,37} %write{2147483647,-1}
const	string	$const2	"transform"		%read{5,7} %write{2147483647,-1}
const	string	$const3	"common"		%read{6,8} %write{2147483647,-1}
temp	normal	$tmp1	%read{9,9} %write{8,8}
temp	float	$tmp2	%read{16,16} %write{15,15}
temp	vector	$tmp3	%read{19,19} %write{16,16}
temp	float	$tmp4	%read{18,18} %write{17,17}
temp	vector	$tmp5	%read{19,19} %write{18,18}
const	float	$const4	0		%read{21,70} %write{2147483647,-1}
const	float	$const5	-1		%read{24,24} %write{2147483647,-1}
temp	normal	$tmp6	%read{29,29} %write{25,25}
temp	float	$tmp7	%read{27,27} %write{26,26}
temp	float	$tmp8	%read{28,28} %write{27,27}
temp	vector	$tmp9	%read{29,29} %write{28,28}
temp	normal	$tmp10	%read{30,30} %write{29,29}
temp	normal	$tmp11	%read{34,34} %write{31,31}
const	float	$const6	1		%read{32,81} %write{2147483647,-1}
temp	float	$tmp12	%read{33,33} %write{32,32}
temp	normal	$tmp13	%read{34,34} %write{33,33}
temp	normal	$tmp14	%read{35,35} %write{34,34}
temp	normal	$tmp15	%read{38,38} %write{37,37}
const	string	$const7	"world"		%read{37,37} %write{2147483647,-1}
const	string	$const8	"ensure_valid_reflection"		%read{39,39} %write{2147483647,-1}
temp	float	$tmp16	%read{41,41} %write{40,40}
temp	float	$tmp17	%read{42,42} %write{41,41}
const	float	$const10	2		%read{41,41} %write{2147483647,-1}
temp	normal	$tmp18	%read{43,43} %write{42,42}
temp	float	$tmp19	%read{45,45} %write{44,44}
const	float	$const11	0.050000001		%read{45,67} %write{2147483647,-1}
temp	int	$tmp20	%read{46,46} %write{45,45}
temp	float	$tmp21	%read{50,50} %write{49,49}
temp	normal	$tmp22	%read{51,51} %write{50,50}
temp	normal	$tmp23	%read{52,52} %write{51,51}
temp	float	$tmp24	%read{57,57} %write{55,55}
const	string	$const12	"sqr"		%read{56,79} %write{2147483647,-1}
temp	float	$tmp25	%read{60,60} %write{58,58}
temp	float	$tmp26	%read{64,64} %write{63,63}
temp	float	$tmp27	%read{65,65} %write{64,64}
temp	float	$tmp28	%read{66,66} %write{65,65}
temp	float	$tmp29	%read{68,68} %write{67,67}
temp	float	$tmp30	%read{70,70} %write{69,69}
temp	int	$tmp31	%read{71,71} %write{70,70}
temp	float	$tmp32	%read{74,74} %write{73,73}
const	float	$const13	0.5		%read{75,75} %write{2147483647,-1}
temp	float	$tmp33	%read{77,77} %write{75,75}
temp	float	$tmp34	%read{77,77} %write{76,76}
temp	float	$tmp35	%read{78,78} %write{77,77}
temp	float	$tmp36	%read{81,81} %write{80,80}
temp	float	$tmp37	%read{82,82} %write{81,81}
temp	vector	$tmp38	%read{85,85} %write{83,83}
temp	normal	$tmp39	%read{85,85} %write{84,84}
code NormalIn
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:25
# 	normal NormalIn = N,
	assign		NormalIn N 	%filename{"C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl"} %line{25} %argrw{"wr"}
code NormalOut
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:31
# 	output normal NormalOut = N)
	assign		NormalOut N 	%filename{"C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl"} %line{31} %argrw{"wr"}
code ___main___
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:33
# 	point Ptmp = P;
	assign		Ptmp P 	%filename{"C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl"} %line{33} %argrw{"wr"}
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:34
# 	normal Normal = NormalIn;
	assign		Normal NormalIn 	%line{34} %argrw{"wr"}
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:36
# 	if (use_object_space) {
	if		use_object_space 10 10 	%line{36} %argrw{"r"}
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:37
# 		Ptmp = transform("object", Ptmp);
	functioncall	$const2 7 	%line{37} %argrw{"r"}
# C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h:243
#     R = reflect(I, N);
	transform	Ptmp $const3 $const1 Ptmp 	%filename{"C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h"} %line{243} %argrw{"wrrr"}
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:38
# 		Normal = normalize(transform("object", Normal));
	functioncall	$const2 9 	%filename{"C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl"} %line{38} %argrw{"r"}
# C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h:241
#     float c = dot(I, N);
	transformn	$tmp1 $const3 $const1 Normal 	%filename{"C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h"} %line{241} %argrw{"wrrr"}
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:38
# 		Normal = normalize(transform("object", Normal));
	normalize	Normal $tmp1 	%filename{"C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl"} %line{38} %argrw{"wr"}
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:42
# 	vector dPdx = Dx(Ptmp);
	Dx		dPdx Ptmp 	%line{42} %argrw{"wr"} %argderivs{1}
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:43
# 	vector dPdy = Dy(Ptmp);
	Dy		dPdy Ptmp 	%line{43} %argrw{"wr"} %argderivs{1}
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:45
# 	vector Rx = cross(dPdy, Normal);
	cross		Rx dPdy Normal 	%line{45} %argrw{"wrr"}
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:46
# 	vector Ry = cross(Normal, dPdx);
	cross		Ry Normal dPdx 	%line{46} %argrw{"wrr"}
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:49
# 	float det = dot(dPdx, Rx);
	dot		det dPdx Rx 	%line{49} %argrw{"wrr"}
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:50
# 	vector surfgrad = (SampleX - SampleCenter) * Rx + (SampleY - SampleCenter) * Ry;
	sub		$tmp2 SampleX SampleCenter 	%line{50} %argrw{"wrr"}
	mul		$tmp3 $tmp2 Rx 	%argrw{"wrr"}
	sub		$tmp4 SampleY SampleCenter 	%argrw{"wrr"}
	mul		$tmp5 $tmp4 Ry 	%argrw{"wrr"}
	add		surfgrad $tmp3 $tmp5 	%argrw{"wrr"}
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:52
# 	float absdet = fabs(det);
	fabs		absdet det 	%line{52} %argrw{"wr"}
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:54
# 	float strength = max(Strength, 0.0);
	max		strength Strength $const4 	%line{54} %argrw{"wrr"}
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:55
# 	float dist = Distance;
	assign		dist Distance 	%line{55} %argrw{"wr"}
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:57
# 	if (invert)
	if		invert 25 25 	%line{57} %argrw{"r"}
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:58
# 		dist *= -1.0;
	mul		dist dist $const5 	%line{58} %argrw{"wrr"}
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:61
# 	NormalOut = normalize(absdet * Normal - dist * sign(det) * surfgrad);
	mul		$tmp6 absdet Normal 	%line{61} %argrw{"wrr"}
	sign		$tmp7 det 	%argrw{"wr"}
	mul		$tmp8 dist $tmp7 	%argrw{"wrr"}
	mul		$tmp9 $tmp8 surfgrad 	%argrw{"wrr"}
	sub		$tmp10 $tmp6 $tmp9 	%argrw{"wrr"}
	normalize	NormalOut $tmp10 	%argrw{"wr"}
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:62
# 	NormalOut = normalize(strength * NormalOut + (1.0 - strength) * Normal);
	mul		$tmp11 strength NormalOut 	%line{62} %argrw{"wrr"}
	sub		$tmp12 $const6 strength 	%argrw{"wrr"}
	mul		$tmp13 $tmp12 Normal 	%argrw{"wrr"}
	add		$tmp14 $tmp11 $tmp13 	%argrw{"wrr"}
	normalize	NormalOut $tmp14 	%argrw{"wr"}
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:64
# 	if (use_object_space) {
	if		use_object_space 39 39 	%line{64} %argrw{"r"}
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:65
# 		NormalOut = normalize(transform("object", "world", NormalOut));
	transformn	$tmp15 $const1 $const7 NormalOut 	%line{65} %argrw{"wrrr"}
	normalize	NormalOut $tmp15 	%argrw{"wr"}
# C:/Users/TGubs/.blenderpy/blender/intern/cycles/kernel/shaders/node_bump.osl:68
# 	NormalOut = ensure_valid_reflection(Ng, I, NormalOut);
	functioncall	$const8 87 	%line{68} %argrw{"r"}
# C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h:289
#         Kr = 1.0;
	dot		$tmp16 NormalOut I 	%filename{"C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h"} %line{289} %argrw{"wrr"}
	mul		$tmp17 $const10 $tmp16 	%argrw{"wrr"}
	mul		$tmp18 $tmp17 NormalOut 	%argrw{"wrr"}
	sub		___538_R $tmp18 I 	%argrw{"wrr"}
# C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h:290
#         Kt = 0.0;
	dot		$tmp19 Ng ___538_R 	%line{290} %argrw{"wrr"}
	ge		$tmp20 $tmp19 $const11 	%argrw{"wrr"}
	if		$tmp20 49 49 	%argrw{"r"}
# C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h:291
#         T = vector (0,0,0);
	assign		NormalOut NormalOut 	%line{291} %argrw{"wr"}
	return
# C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h:298
#     vector R, T;
	dot		$tmp21 NormalOut Ng 	%line{298} %argrw{"wrr"}
	mul		$tmp22 $tmp21 Ng 	%argrw{"wrr"}
	sub		$tmp23 NormalOut $tmp22 	%argrw{"wrr"}
	normalize	___538_X $tmp23 	%argrw{"wr"}
# C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h:301
# 
	dot		___538_Ix I ___538_X 	%line{301} %argrw{"wrr"}
	dot		___538_Iz I Ng 	%argrw{"wrr"}
# C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h:302
# 
	dot		$tmp24 I ___538_X 	%line{302} %argrw{"wrr"}
	functioncall	$const12 58 	%argrw{"r"}
# C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h:287
#     float sqr(float x) { return x*x; }
	mul		___538_Ix2 $tmp24 $tmp24 	%line{287} %argrw{"wrr"}
# C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h:302
#     float Ix2 = sqr(dot(I, X)), Iz2 = sqr(dot(I, Ng));
	dot		$tmp25 I Ng 	%line{302} %argrw{"wrr"}
	functioncall	$const12 61 	%argrw{"r"}
# C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h:287
#     float sqr(float x) { return x*x; }
	mul		___538_Iz2 $tmp25 $tmp25 	%line{287} %argrw{"wrr"}
# C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h:303
#     float Ix2Iz2 = Ix2 + Iz2;
	add		___538_Ix2Iz2 ___538_Ix2 ___538_Iz2 	%line{303} %argrw{"wrr"}
# C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h:305
#     float a = sqrt(Ix2*(Ix2Iz2 - sqr(0.05)));
	functioncall	$const12 64 	%line{305} %argrw{"r"}
# C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h:287
#     float sqr(float x) { return x*x; }
	mul		$tmp26 $const11 $const11 	%line{287} %argrw{"wrr"}
# C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h:305
#     float a = sqrt(Ix2*(Ix2Iz2 - sqr(0.05)));
	sub		$tmp27 ___538_Ix2Iz2 $tmp26 	%line{305} %argrw{"wrr"}
	mul		$tmp28 ___538_Ix2 $tmp27 	%argrw{"wrr"}
	sqrt		___538_a $tmp28 	%argrw{"wr"}
# C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h:306
#     float b = Iz*0.05 + Ix2Iz2;
	mul		$tmp29 ___538_Iz $const11 	%line{306} %argrw{"wrr"}
	add		___538_b $tmp29 ___538_Ix2Iz2 	%argrw{"wrr"}
# C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h:307
#     float c = (a + b > 0.0)? (a + b) : (-a + b);
	add		$tmp30 ___538_a ___538_b 	%line{307} %argrw{"wrr"}
	gt		$tmp31 $tmp30 $const4 	%argrw{"wrr"}
	if		$tmp31 73 75 	%argrw{"r"}
	add		___538_c ___538_a ___538_b 	%argrw{"wrr"}
	neg		$tmp32 ___538_a 	%argrw{"wr"}
	add		___538_c $tmp32 ___538_b 	%argrw{"wrr"}
# C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h:309
#     float Nz = sqrt(0.5 * c * (1.0 / Ix2Iz2));
	mul		$tmp33 $const13 ___538_c 	%line{309} %argrw{"wrr"}
	div		$tmp34 $const6 ___538_Ix2Iz2 	%argrw{"wrr"}
	mul		$tmp35 $tmp33 $tmp34 	%argrw{"wrr"}
	sqrt		___538_Nz $tmp35 	%argrw{"wr"}
# C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h:310
#     float Nx = sqrt(1.0 - sqr(Nz));
	functioncall	$const12 81 	%line{310} %argrw{"r"}
# C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h:287
#     float sqr(float x) { return x*x; }
	mul		$tmp36 ___538_Nz ___538_Nz 	%line{287} %argrw{"wrr"}
# C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h:310
#     float Nx = sqrt(1.0 - sqr(Nz));
	sub		$tmp37 $const6 $tmp36 	%line{310} %argrw{"wrr"}
	sqrt		___538_Nx $tmp37 	%argrw{"wr"}
# C:/Users\\TGubs\\.blenderpy\\blender\\intern\\cycles\\kernel\\shaders\\stdosl.h:313
#     return Nx*X + Nz*Ng;
	mul		$tmp38 ___538_Nx ___538_X 	%line{313} %argrw{"wrr"}
	mul		$tmp39 ___538_Nz Ng 	%argrw{"wrr"}
	add		NormalOut $tmp38 $tmp39 	%argrw{"wrr"}
	return
	end
